<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
<!--    开启二级缓存
        eviction是缓存清除策略，当缓存对象达到上限时，自动触发对应算法对缓存对象清除
            1、LRU - 最近最久未使用：移除最长时间不被使用的对象。
            01 02 03 04 .。 0512
            14 99 83 1       893
            2、FIFO - 先进先出：按对象进入缓存的顺序来移除他们
            3、SOFT - 软引用：移除基于垃圾收集器状态和引用规则的对象
            4、WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象
        flushInterval 代表间隔多长时间自动清空缓存 单位毫秒 600000毫秒 = 10 分钟
        size 缓存存储上限 用于保存对象或集合（1个集合算一个对象）的数量上限（一般不建议缓存list 因为list内容多变
        readOnly 设置为true 代表返回只读缓存，每次从缓存取出的是缓存对象本身，这种执行效率高
                 设置为false 代表每次取出的是缓存对象的“副本”，每一次取出的对象是不同的，这种安全性比较高

    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"></cache>
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        order by goods_id limit 10
    </select>
<!--    单参数传递时，使用parameterType指定参数的类型即可，SQL中#{value}提取参数-->
    <select id="selectById" parameterType="Integer" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where goods_id = #{value}
    </select>
    <!--    多参数传递时，使用parameterType指定Map接口，SQL中#{key}提取参数-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price DESC limit 0,#{limit}
    </select>
    <!--   多表联查
            利用LinkedHashMap保存多表关联结果
            MyBatis会将每一条记录包装为 LinkedHashMap对象
            key是 字段名，value是字段对应的值，字段类型根据表结构 进行自动判断
            优点：易于拓展、易于使用
            缺点 ：太过灵活，无法进行，编译时检查
    -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id limit 10
    </select>
<!--    flushCache="true" 在sql执行后强制清空缓存-->
    <insert flushCache="true"
            id="insert" parameterType="com.imooc.mybatis.entity.Goods"
            useGeneratedKeys="true"
            keyProperty="goodsId"
            keyColumn="goods_id">
        insert into t_goods (`title`,`sub_title`,`original_cost`,`current_price`,`discount`,`is_free_delivery`)
        values(#{title},#{subTitle},#{originalCost},#{currentPrice},#{discount},#{is_free_delivery})
        <!--        <selectKey resultType="int" keyProperty="goodsId" order="AFTER">-->
        <!--&#45;&#45;         插入成功后获得自动生成的主键    当前连接中最后产生的id号-->
        <!--            select last_insert_id()-->
        <!--        </selectKey>-->
    </insert>
    <update id="update" parameterType="com.imooc.mybatis.entity.Goods">
        update t_goods
        set title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id = #{categoryId}
        where goods_id = #{goodsId}
    </update>
    <delete id="delete" parameterType="com.imooc.mybatis.entity.Goods">
        delete
        from t_goods
        where goods_id = #{goodsId}
    </delete>
    <select id="selectByTitle" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where title = ${title}
    </select>
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
--                  &lt;是HTML实体编码，表示小于号
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>
<!--    resultMap可用于说明一对多或者多对一的映射逻辑
        id是resultMap属性的引用标志
        type指向one的实体（Goods）
-->
    <resultMap id="rmGoods1" type="com.imooc.mybatis.entity.Goods">
<!--        映射goods对象的主键到goods_id字段-->
        <id column="goods_id" property="goodsId"></id>
<!--        collection的含义是，在
            select * from t_goods limit 0,1 得到结果后，对所有goods对象遍历得到goods_id字段值
            将得到的商品详情集合赋值给goodsDetails List对象
-->
        <collection property="goodsDetails" select="goodsDetail.selectByGoodsId" column="goods_id"/>

    </resultMap>
    <select id="onToMany" resultMap="rmGoods1">
        select * from t_goods limit 0,10
    </select>
    <select id="selectPage" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods  where  current_price &lt; 1000
    </select>
<!--    批量插入-->
<!--    insert into table values('a','a1','a2'),('b','b1','b2'),(...)-->
    <insert id="batchInsert" parameterType="java.util.List">
--         `title`,`sub_title`,`original_cost`,`current_price`,`discount`,`is_free_delivery`
        INSERT INTO t_goods (title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES
--         对传入的标签进行遍历 list是mybatis要求的参数名称
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title},#{item.subTitle}, #{item.originalCost}, #{item.currentPrice}, #{item.discount}, #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>
<!--    批量删除-->
<!--    delete t_goods where goods_id in (1920,1921)-->
    <delete id="batchDelete" parameterType="java.util.List">
        delete from t_goods where goods_id in
        <foreach collection="list"  item="item" index="index" open="(" close=")"  separator="," >
            #{item}
        </foreach>
    </delete>
</mapper>